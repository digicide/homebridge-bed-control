import { Logger } from 'homebridge';
import { AxiosError, AxiosResponse } from 'axios';
import './string.extensions';
import { LoginData, RegistrationData, FamilyStatusData, SleeperData, BedData, BedStatusData, PauseMode_e, BedPauseModeData, BedSide_e, SleepNumberData, ResponsiveAirStatusData, ResponsiveAirData, UnderbedLightStatusData, UnderbedLightData, FootwarmingStatusData, FootwarmingData, ForceIdleData, PumpStatusData, Preset_e, PresetData, Actuator_e, AdjustData, FoundationStatusData, Outlets_e, Outlet_Setting_e, OutletStatusData, Motion_e, MotionData, Adjustment_e, AdjustmentData, SleepDataData, SleepSliceDataData } from './interfaces';
declare class snapi {
    private readonly username;
    private readonly password;
    readonly log?: Logger | undefined;
    protected userId: string;
    protected bedID: string[];
    private key;
    protected apiDisabled: boolean;
    private _login?;
    constructor(username: string, password: string, log?: Logger | undefined);
    print_errors(e: Error | AxiosError, caller: string): void;
    retry<T>(func: () => Promise<T>, count?: number): Promise<T | undefined>;
    login(username?: string, password?: string): Promise<LoginData | undefined>;
    batchLogin(): Promise<LoginData | undefined>;
    getRegistration(): Promise<AxiosResponse<RegistrationData, any> | undefined>;
    registration(): Promise<RegistrationData | undefined>;
    getFamilyStatus(): Promise<AxiosResponse<FamilyStatusData, any> | undefined>;
    familyStatus(): Promise<import("./interfaces").BedState[] | undefined>;
    getSleeper(): Promise<AxiosResponse<SleeperData, any> | undefined>;
    sleeper(): Promise<SleeperData | undefined>;
    getBed(): Promise<AxiosResponse<BedData, any> | undefined>;
    bed(): Promise<BedData | undefined>;
    getBedStatus(bedId: string): Promise<AxiosResponse<BedStatusData, any> | undefined>;
    bedStatus(bedId: string): Promise<BedStatusData | undefined>;
    getBedPauseMode(bedId: string): Promise<AxiosResponse<BedPauseModeData, any> | undefined>;
    bedPauseMode(bedId: string): Promise<PauseMode_e | undefined>;
    putBedPauseMode(bedId: string, mode: PauseMode_e): Promise<AxiosResponse<BedPauseModeData, any> | undefined>;
    setBedPauseMode(bedId: string, mode: PauseMode_e): Promise<BedPauseModeData | undefined>;
    putSleepNumber(bedId: string, side: BedSide_e, num: number): Promise<AxiosResponse<SleepNumberData, any> | undefined>;
    sleepNumber(bedId: string, side: BedSide_e, num: number): Promise<SleepNumberData | undefined>;
    getResponsiveAirStatus(bedId: string): Promise<AxiosResponse<ResponsiveAirStatusData, any> | undefined>;
    responsiveAirStatus(bedId: string): Promise<ResponsiveAirStatusData | undefined>;
    putResponsiveAir(bedId: string, left?: boolean, right?: boolean): Promise<AxiosResponse<ResponsiveAirData, any> | undefined>;
    responsiveAir(bedId: string, left?: boolean, right?: boolean): Promise<ResponsiveAirData | undefined>;
    putForceIdle(bedId: string): Promise<AxiosResponse<ForceIdleData, any> | undefined>;
    forceIdle(bedId: string): Promise<ForceIdleData | undefined>;
    getPumpStatus(bedId: string): Promise<AxiosResponse<PumpStatusData, any> | undefined>;
    pumpStatus(bedId: string): Promise<PumpStatusData | undefined>;
    putPreset(bedId: string, side: BedSide_e, preset: Preset_e): Promise<AxiosResponse<PresetData, any> | undefined>;
    preset(bedId: string, side: BedSide_e, preset: Preset_e): Promise<PresetData | undefined>;
    putAdjust(bedId: string, side: BedSide_e, position: number, actuator: Actuator_e): Promise<AxiosResponse<AdjustData, any> | undefined>;
    adjust(bedId: string, side: BedSide_e, position: number, actuator: Actuator_e): Promise<AdjustData | undefined>;
    getFoundationStatus(bedId: string): Promise<AxiosResponse<FoundationStatusData, any> | undefined>;
    foundationStatus(bedId: string): Promise<FoundationStatusData | undefined>;
    getOutletStatus(bedId: string, outletId: Outlets_e): Promise<AxiosResponse<OutletStatusData, any> | undefined>;
    outletStatus(bedId: string, outletId: Outlets_e): Promise<OutletStatusData | undefined>;
    putOutlet(bedId: string, outletId: Outlets_e, setting: Outlet_Setting_e): Promise<AxiosResponse<OutletStatusData, any> | undefined>;
    outlet(bedId: string, outletId: Outlets_e, setting: Outlet_Setting_e): Promise<OutletStatusData | undefined>;
    putMotion(bedId: string, side: BedSide_e, head: Motion_e, massage: Motion_e, foot: Motion_e): Promise<AxiosResponse<MotionData, any> | undefined>;
    motion(bedId: string, side: BedSide_e, head: Motion_e, massage: Motion_e, foot: Motion_e): Promise<MotionData | undefined>;
    getUnderbedLightStatus(bedId: string): Promise<AxiosResponse<UnderbedLightStatusData, any> | undefined>;
    underbedLightStatus(bedId: string): Promise<UnderbedLightStatusData | undefined>;
    putUnderbedLight(bedId: string, enableAuto: boolean): Promise<AxiosResponse<UnderbedLightData, any> | undefined>;
    underbedLight(bedId: string, enableAuto: boolean): Promise<UnderbedLightData | undefined>;
    getFootwarmingStatus(bedId: string): Promise<AxiosResponse<FootwarmingStatusData, any> | undefined>;
    footwarmingStatus(bedId: string): Promise<FootwarmingStatusData | undefined>;
    putFootwarming(bedId: string, left?: number, right?: number, timerLeft?: number, timerRight?: number): Promise<AxiosResponse<FootwarmingData, any> | undefined>;
    footwarming(bedId: string, left?: number, right?: number, timerLeft?: number, timerRight?: number): Promise<FootwarmingData | undefined>;
    putAdjustment(bedId: string, side: BedSide_e, head: Adjustment_e, waveMode: Adjustment_e, foot: Adjustment_e, timer?: number): Promise<AxiosResponse<AdjustmentData, any> | undefined>;
    adjustment(bedId: string, side: BedSide_e, head: Adjustment_e, waveMode: Adjustment_e, foot: Adjustment_e, timer?: number): Promise<AdjustmentData | undefined>;
    getSleepData(data_date: string, interval: string, sleeper?: string): Promise<AxiosResponse<SleepDataData, any> | undefined>;
    sleepData(data_date: string, interval: string, sleeper?: string): Promise<SleepDataData | undefined>;
    getSleepSliceData(data_date: string, sleeper?: string, format?: string): Promise<AxiosResponse<SleepSliceDataData, any> | undefined>;
    sleepSliceData(data_date: string, sleeper?: string, format?: string): Promise<SleepSliceDataData | undefined>;
    batchRequests<T>(_p: string, func: () => Promise<T>): Promise<T>;
}
export default snapi;
//# sourceMappingURL=snapi.d.ts.map